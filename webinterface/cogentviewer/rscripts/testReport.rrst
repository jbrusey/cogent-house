.. {r external-code, include=FALSE}
   read_chunk('testReport.R')
.. ..


.. {r setup, include=FALSE}

   #fig.path = paste("figure/", houseStr, sep = ""),
   #House Id to fetch data for
   ##hId = 7

   #out.width=".9\\textwidth",
   opts_chunk$set(           
      dev="png", 
      fig.lp = "fig:",
      fig.path = "fig-",
      fig.keep="high",
      fig.show="hold",
      fig.align="center",
      comment=NA)

      #fig.width=6.5,
      #fig.height=3.5,

   opts_chunk$set(aliases=c(h='fig.height',
			    w='fig.width',
   			    cap='fig.cap',
			    scap='fig.scap'))

   ##options(width = 75)
   ##opts_chunk$set(cache=TRUE, fig.width=5, fig.height=5)
.. .. 

.. {r init, include=FALSE}
   #Initialise Data
.. .. 

######################
Deployment Report
######################

Deployment Data Details
========================

.. {r summary, include=FALSE}
   #Generate Summary Statistics
.. ..

Overview of deployment details

* Data Start :r:`as.character(dataStart)`
* Data End   :r:`as.character(dataEnd)`
* Data Length :r:`as.period(dateRange) %/% days(1)` Days

Node Summary
--------------

Details of Nodes in this deployment and where they were placed.

.. {r nodeTable, results ='asis', echo=FALSE}
   pandoc.table(nodeSum,style="grid")
.. ..


Yield Summary
--------------

.. {r yieldCalcs, include=FALSE}
   # Do the calculations requried for yield
.. .. 

This section gives details of the node yield. 

Yield is shown as a percentage of the total expected samples per node received
and stored at the base station.

Given the standard 5 minute sampling period it is expected that the base station
will receive *288* samples per node per day. The daily yield per sensor is
calculated through *received samples \ 288 100*

When examining daily yield it is important to note that the first and last days
of the deployment will show yield below 100%, this is due to the equipment being
installed or removed on these days, and thus a incomplete data set for that day
being available.

.. {r yieldGraph, fig.cap="Per Node Yield Overview", echo=FALSE}
   plt <- ggplot(yieldTable,aes(factor(nodeId),Yield))
   plt <- plt+geom_bar(stat="identity",fill="white",color="darkgreen")
   plt <- plt + geom_hline(yintercept=90)
   plt <- plt+xlab("Node") + ylab("Yield %")
   plt <- plt+ylim(0,100)
   plt <- plt+ theme_bw()
   plt <- plt+theme(axis.text.x=element_text(angle=90))
   plt
.. .. 

When examining node yield, a *heatmap* plot can help identify node or periods
whith lower than expected yield.  In this type of plot, darker regions indicate
lower yield.  Note: It is expected that the first and last colums will show
lower than 100% yield, as the deploymment setup / tear down means that less than
a full day of data is available.

.. {r yieldHeatmap, fig.cap="Yield Heatmap", echo=FALSE}

   plt <- ggplot(yieldNodes,aes(date,descstr,fill=yield))
   plt <- plt+geom_tile(color="white")
   plt <- plt+xlab("Date") + ylab("Location")
   plt <- plt+scale_fill_gradient(limits=c(0,100))
   plt 

.. ..

===============
Data Summaries
===============

This next section gives details of the environmental parameters measured during the deployment

Temperature Data
------------------

.. {r tempData, include=FALSE}
   #Fetch Temperature data
.. ..

The following graph shows an overview of the temperature data streams for the monitoring period

.. {r tempGraphs, echo=FALSE, fig.cap="Temperature Data Traces"}

   plt <- ggplot(ss,aes(ts,value,color=factor(nodeId)))
   plt <- plt+geom_line()
   plt <- plt+xlab("Date") + ylab("Temperature")
   plt <- plt + theme_bw()
   plt <- plt + facet_grid(locationStr~.)
   plt <- plt+scale_color_discrete(name="Node")
   plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="top")
   plt
.. .. 

.. {r tempSummary, echo=FALSE,results="asis"}
   pandoc.table(summary,style="grid",caption="Temperature Data Summary",split.tables="Inf")
.. .. 

Temperature Exposure
---------------------

Temperature exposure is defined as the percentage of samples that fall into each
comfort band (as defined by the ASHRE standard). Figure XXX shows the comfort
levels for each room in the property.

.. {r tempComfortGraph, echo=FALSE, fig.cap="Temperatre Exposure"}

   plt <- ggplot(expose,aes(descstr,p,fill=comfort))
   plt <- plt+geom_bar(stat="identity")
   plt <- plt+scale_fill_manual("Comfort Level",values=rev(brewer.pal(n=5,"RdYlBu")))
   plt <- plt+xlab("Room")
   plt <- plt+ylab("Percentage of samples at this level")
   plt <- plt+guides(size=FALSE)
   plt <- plt+theme_bw()
   plt <- plt+theme(legend.position="top",axis.text.x=element_text(angle=90),legend.title=element_blank())
   plt

.. ..

.. {r temp exposeTable,echo=FALSE,results='asis'}
   pandoc.table(exposeFlat,style="grid",caption="Temperature Exposure Levels",split.tables="Inf")
.. .. 


Humidity Data
---------------

.. {r exposeData, include=FALSE}
   #Fetch Humidity
.. ..

The following graph gives an overview of the Humidity data traces collected during the deployment

.. {r humGraphs, echo=FALSE, fig.cap="Humidity Data Traces"}

   plt <- ggplot(ss,aes(ts,value,color=factor(nodeId)))
   plt <- plt+geom_line()
   plt <- plt+xlab("Date") + ylab("Humidity")
   plt <- plt + theme_bw()
   plt <- plt + facet_grid(locationStr~.)
   plt <- plt+scale_color_discrete(name="Node")
   plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="top")
   plt
.. .. 

.. {r humSummary, echo=FALSE,results="asis"}
   pandoc.table(summary,style="grid",caption="Humidity Data Summary",split.tables="Inf")
.. .. 


Humidity Exposure
-------------------

Humidity exposure is defined as the percentage of samples that fall into each
comfort band (as defined by the ASHRE standard). Figure XXX shows the comfort
levels for each room in the property.

.. {r humComfortGraph, echo=FALSE, fig.cap="Humidity Exposure"}

   plt <- ggplot(expose,aes(descstr,p,fill=comfort))
   plt <- plt+geom_bar(stat="identity")
   plt <- plt+scale_fill_manual("Comfort Level",values=rev(brewer.pal(n=5,"RdYlBu")))
   plt <- plt+xlab("Room")
   plt <- plt+ylab("Percentage of samples at this level")
   plt <- plt+guides(size=FALSE)
   plt <- plt+theme_bw()
   plt <- plt+theme(legend.position="top",axis.text.x=element_text(angle=90),legend.title=element_blank())
   plt

.. ..

.. {r temp humexposeTable,echo=FALSE,results='asis'}
   pandoc.table(exposeFlat,style="grid",caption="Humidity Exposure Levels",split.tables="Inf")
.. .. 


.. {r otherData, echo=FALSE}
   #Fetch other Data
.. .. 

.. {r otherCheck, echo=FALSE}
   #Check to see if we have other data
   doother = FALSE
   if (nrow(ss) > 0){
      doother = TRUE
      }
.. .. 

.. {r doother,child = if(doother==TRUE)'otherdata.rrst' else 'blank.rrst'}
.. ..

