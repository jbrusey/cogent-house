// Generated by CoffeeScript 1.3.3

require(["dgrid/OnDemandGrid", "dgrid/tree", "dojo/store/JsonRest", "dgrid/extensions/DijitRegistry", "dojo/_base/declare", "dijit/tree/ObjectStoreModel", "dijit/Tree", "dojo/domReady!"], function(Grid, tree, JsonRest, DijitRegistry, Declare, ObjectStoreModel, Tree) {
  var theModel, theTree, treeStore;
  console.log("Starting Tree Grid");
  treeStore = JsonRest({
    target: "rest/deploymenttree/",
    getChildren: function(object, options) {
      var theChildren;
      theChildren = this.query({
        parent: object.id
      });
      return theChildren;
    }
  });
  theModel = new ObjectStoreModel({
    store: treeStore
  });
  theTree = new Tree({
    model: theModel
  }, "treeNode");
  theTree.getIconClass = function(item, opened) {
    if (item.id === "root") {
      if (opened) {
        return "dijitFolderOpened";
      } else {
        return "dijitFolderClosed";
      }
    } else if (item.type === "deployment") {
      return "deployIcon";
    } else if (item.type === "house") {
      return "houseDarkIcon";
    } else if (item.type === "location") {
      return "locDarkIcon";
    }
    return "dijitLeaf";
  };
  theTree.startup();
});

require(["dijit/form/Button", "dijit/form/DateTextBox", "dijit/form/FilteringSelect", "dojo/store/Cache", "dojo/store/JsonRest", "dojo/store/Observable", "dojo/store/Memory", "dijit/tree/ObjectStoreModel", "dijit/Tree", "dojo/ready", "dojo/topic", "dojo/domReady!"], function(Button, DateTextBox, Select, Cache, JsonRest, Observable, Memory, ObjectStoreModel, Tree, ready, topic) {
  var clearData, getData, sensorTypeSelect, showData, startDateSelect, stopDateSelect, typeStore;
  typeStore = Cache(Observable(JsonRest({
    target: "./rest/sensortype/"
  })), Memory());
  startDateSelect = new DateTextBox({
    name: "startDate"
  }, "startDate");
  startDateSelect.startup();
  stopDateSelect = new DateTextBox({
    name: "stopDate"
  }, "stopDate");
  stopDateSelect.startup();
  sensorTypeSelect = new Select({
    name: "sensorType",
    store: typeStore
  }, "sensorType");
  sensorTypeSelect.startup();
  getData = new Button({
    label: "Get Data",
    onClick: function() {
      return showData();
    }
  }, "getData");
  getData.startup();
  clearData = new Button({
    label: "Clear",
    onClick: function() {
      startDateSelect.reset();
      stopDateSelect.reset();
      return sensorTypeSelect.reset();
    }
  }, "clearData");
  clearData.startup();
  return showData = function() {
    var item, selEnd, selSensor, selStart, selectedItems, splitItem, theId, theTree, treeItems, _i, _len;
    theTree = dijit.byId("treeNode");
    treeItems = theTree.selectedItems;
    selectedItems = {
      "deployments": [],
      "houses": [],
      "locations": [],
      "locType": []
    };
    for (_i = 0, _len = treeItems.length; _i < _len; _i++) {
      item = treeItems[_i];
      if (item.id === "root") {
        return;
      } else {
        theId = item.id;
        splitItem = theId.split("_");
        console.log("Processing item ", item, "  Splits to ", splitItem);
        if (splitItem[0] === "d") {
          selectedItems.deployments.push(splitItem[1]);
        } else if (splitItem[0] === "h") {
          selectedItems.houses.push(splitItem[1]);
        } else if (splitItem[0] === "l") {
          selectedItems.locations.push(splitItem[1]);
        } else if (splitItem[0] === "t") {
          selectedItems.locType.push([splitItem[1], splitItem[2]]);
        }
      }
    }
    selStart = startDateSelect.get("value");
    selEnd = stopDateSelect.get("value");
    selSensor = sensorTypeSelect.get("value");
    selectedItems.startDate = selStart;
    selectedItems.endDate = selEnd;
    selectedItems.sensorType = selSensor;
    console.log("Element to be Published ", selectedItems);
    return topic.publish("navTree", selectedItems);
  };
});
