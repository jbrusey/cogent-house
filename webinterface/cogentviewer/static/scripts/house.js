// Generated by CoffeeScript 1.6.3
var batteryFormatter, dateFormatter, dateNow, statusFormatter;

require(["dojo/date"]);

dateNow = new Date();

dateFormatter = function(dateStr) {
  var dateDiff, formatDate, theDate;
  if (dateStr) {
    theDate = dojo.date.stamp.fromISOString(dateStr);
    dateDiff = dojo.date.difference(theDate, dateNow, "hour");
    formatDate = dojo.date.locale.format(theDate, {
      format: "short"
    });
    if (dateDiff > 24) {
      return "<div class='bad'>" + formatDate;
    } else if (dateDiff > 1) {
      return "<div class='middle'>" + formatDate;
    } else {
      return "<div class='good'>" + formatDate;
    }
    return formatDate;
  } else {
    return null;
  }
};

batteryFormatter = function(batteryLevel) {
  if (batteryLevel === null) {
    return "";
  }
  if (batteryLevel > 2.8) {
    return "<div class='good'>" + batteryLevel + "</div>";
  } else if (batteryLevel > 2.4) {
    return "<div class='middle'>" + batteryLevel + "</div>";
  } else {
    return "<div class='bad'>" + batteryLevel + "</div>";
  }
};

statusFormatter = function(theStatus) {
  if (theStatus === "Good") {
    return "<div class='good'>" + theStatus + "</div>";
  } else if (theStatus === "Not Reporting") {
    return "<div class='middle'>" + theStatus + "</div>";
  } else if (theStatus === "No Data") {
    return "<div class='bad'>" + theStatus + "</div>";
  } else if (theStatus === "Low Battery") {
    return "<div class='middle'>" + theStatus + "</div>";
  }
  return theStatus;
};

require(["dijit/form/Button", "dijit/form/FilteringSelect", "dijit/form/TextBox", "dijit/form/SimpleTextarea", "dijit/form/DateTextBox", "dijit/form/TimeTextBox", "dojo/data/ObjectStore", "dojo/store/Cache", "dojo/store/JsonRest", "dojo/store/Memory", "dojo/domReady!"], function(Button, FilterSelect, TextBox, SimpleTextArea, DateTextBox, TimeTextBox, ObjectStore, Cache, jsonRest, Memory) {
  var depSelect, deployDataStore, deployStore, edDate, edTime, houseAdd, houseStore, processSave, saveBtn, stDate, stTime;
  deployStore = jsonRest({
    target: "../rest/deployment/"
  });
  deployDataStore = ObjectStore({
    objectStore: deployStore
  });
  depSelect = new FilterSelect({
    id: "depSelect",
    store: deployStore,
    searchAttr: "name",
    placeholder: "Select a deployment"
  }, "depName");
  depSelect.startup();
  houseAdd = new TextBox({}, "houseAdd");
  houseAdd.startup();
  stDate = new DateTextBox({}, "stDate");
  stDate.startup();
  stTime = new TimeTextBox({}, "stTime");
  stTime.startup();
  edDate = new DateTextBox({}, "edDate");
  edDate.startup();
  edTime = new TimeTextBox({}, "edTime");
  edTime.startup();
  saveBtn = new Button({
    label: "Save",
    onClick: function() {
      return processSave();
    }
  }, "Save");
  saveBtn.startup();
  houseStore = jsonRest({
    target: "../rest/house/"
  });
  if (houseId) {
    houseStore.query({
      id: houseId
    }).then(function(item) {
      var theHouse;
      theHouse = item[0];
      houseAdd.set("value", theHouse.address);
      stDate.set("value", theHouse.startDate);
      edDate.set("value", theHouse.endDate);
      stTime.set("value", theHouse.startDate);
      edTime.set("value", theHouse.endDate);
      return deployStore.query({
        id: theHouse.deploymentId
      }).then(function(depItem) {
        if (depItem.length > 0) {
          return depSelect.set("displayedValue", depItem[0].name);
        }
      });
    });
  } else {
    console.log("No ID Supplied");
  }
  return processSave = function() {
    var endDate, endTime, out, startDate, startTime, textValue, theAddress, theDeployment, theItem;
    theDeployment = depSelect.value;
    theAddress = houseAdd.value;
    startDate = stDate.value;
    endDate = edDate.value;
    startTime = stTime.value;
    endTime = edTime.value;
    console.log("The Deployment is ", theDeployment);
    if (theDeployment === "") {
      console.log("No such deployment");
      textValue = depSelect.get("displayedValue");
      theDeployment = {
        "__table__": "deployment",
        "name": textValue
      };
      console.log(theDeployment);
      deployStore.put(theDeployment).then(function(obj) {
        console.log(obj);
        return theDeployment = obj.id;
      });
    }
    if (startDate === null || isNaN(startDate.valueOf())) {
      startDate = null;
    }
    if (endDate === null || isNaN(endDate.valueOf())) {
      endDate = null;
    }
    if (startTime === null || isNaN(startTime.valueOf())) {
      startTime = null;
    }
    if (endTime === null || isNaN(endTime.valueOf())) {
      endTime = null;
    }
    console.log("Start Date: ", startDate, " Time: ", startTime);
    if (startDate && startTime) {
      startDate.setHours(startTime.getHours());
      startDate.setMinutes(startTime.getMinutes());
    }
    if (endDate && endTime) {
      endDate.setHours(endTime.getHours());
      endDate.setMinutes(endTime.getMinutes());
    }
    console.log("New Start Date ", startDate);
    console.log("Deploymebnt ID: ", theDeployment);
    if (houseId) {
      houseStore.query({
        id: houseId
      }).then(function(item) {
        var theHouse;
        theHouse = item[0];
        console.log("Exisitng House: ", theHouse);
        theHouse.deploymentId = theDeployment;
        theHouse.address = theAddress;
        theHouse.startDate = startDate;
        theHouse.endDate = endDate;
        return houseStore.put(theHouse);
      });
    } else {
      theItem = {
        "deploymentId": theDeployment,
        "address": theAddress,
        "startDate": startDate,
        "endDate": endDate,
        "__table__": "House"
      };
      out = houseStore.put(theItem).then(function(obj) {
        var houseId;
        houseId = obj.id;
        window.location = "" + obj.id;
      });
      return;
    }
  };
});

require(["dijit/form/Button", "dijit/form/FilteringSelect", "dijit/form/ComboBox", "dijit/form/TextBox", "dijit/form/SimpleTextarea", "dijit/form/DateTextBox", "dijit/form/TimeTextBox", "dijit/form/CheckBox", "dojo/data/ObjectStore", "dojo/store/Cache", "dojo/store/JsonRest", "dojo/store/Memory", "dojox/grid/DataGrid", "dojo/store/Observable", "dojo/_base/Deferred", "dojo/io/script", "dijit/Dialog", "dijit/registry", "dojo/parser", "dgrid/OnDemandGrid", "dgrid/Keyboard", "dgrid/Selection", "dgrid/editor", "dgrid/selector", "dojo/_base/declare", "dgrid/extensions/DijitRegistry", "dgrid/tree", "dojo/domReady!"], function(Button, FilterSelect, ComboBox, TextBox, SimpleTextArea, DateTextBox, TimeTextBox, CheckBox, ObjectStore, Cache, jsonRest, Memory, DataGrid, Observable, Deferred, ioScript, Dialog, registry, parser, OnDemandGrid, Keyboard, Selection, editor, selector, declare, DijitRegistry, tree) {
  var addLocation, cancelNodeBtn, clearNode, houseSelect, houseStore, locationStore, nodeSelect, nodeStore, out, procRegister, regNodeBtn, regNodeDlg, registerGrid, registerStore, roomSelect, roomStore, showDlg, statRefresh, statRegister, statusGrid, statusStore, theBtn, typeStore, unRegNode, unRegisterNode, updateNode, updateNodeLocation, updateTimes, updateTimestamps;
  nodeStore = Cache(Observable(jsonRest({
    target: "../rest/node/"
  })), Memory());
  houseStore = Cache(Observable(jsonRest({
    target: "../rest/house/"
  })), Memory());
  roomStore = Cache(Observable(jsonRest({
    target: "../rest/room/"
  })), Memory());
  typeStore = Cache(Observable(jsonRest({
    target: "../rest/roomtype/"
  })), Memory());
  locationStore = Cache(Observable(jsonRest({
    target: "../rest/location/"
  })), Memory());
  registerStore = Cache(Observable(jsonRest({
    target: "../sumRest/register/"
  })), Memory());
  statusStore = Cache(Observable(jsonRest({
    target: "../sumRest/status/"
  })), Memory());
  registerStore.getChildren = function(object, options) {
    var theChildren;
    console.log("Fetching Children for ", object, "  ", options);
    theChildren = this.query({
      parent: object.id
    });
    console.log("Children Are ", theChildren);
    return theChildren;
  };
  registerGrid = new declare([OnDemandGrid, Keyboard, Selection, DijitRegistry])({
    columns: [
      selector({
        selectorType: "checkbox",
        label: "Select"
      }), {
        label: "Node",
        field: "node"
      }, {
        label: "Room",
        field: "room"
      }, {
        label: "Status",
        field: "status",
        formatter: statusFormatter
      }, {
        label: "Voltage",
        field: "voltage",
        formatter: batteryFormatter
      }, {
        label: "First Tx",
        field: "firstTx",
        formatter: dateFormatter
      }, {
        label: "Last Tx",
        field: "lastTx",
        formatter: dateFormatter
      }, {
        label: "Total Samples",
        field: "totalSamples"
      }
    ],
    selectorType: "checkbox",
    store: registerStore,
    query: {
      houseId: houseId,
      summary: true
    },
    skin: "claro"
  }, "regGrid");
  unRegNode = new Button({
    label: "Unregister Selected",
    onClick: function() {
      return unRegisterNode();
    }
  }, "unRegNode");
  clearNode = new Button({
    label: "Clear Selection",
    onClick: function() {
      return registerGrid.refresh();
    }
  }, "clearNode");
  updateNode = new Button({
    label: "Update",
    onClick: function() {
      return registerGrid.refresh();
    }
  }, "updateNode");
  nodeSelect = new ComboBox({
    id: "nodeSelect",
    value: "",
    store: nodeStore,
    required: true,
    searchAttr: "id"
  }, "regNodeId");
  houseSelect = new FilterSelect({
    id: "houseSelect",
    value: "",
    store: houseStore,
    searchAttr: "address"
  }, "regNodeHouse");
  if (houseId) {
    houseSelect.set("disabled", true);
  }
  roomSelect = new ComboBox({
    id: "roomSelect",
    value: "",
    store: roomStore,
    required: true,
    storeAttr: "name"
  }, "regNodeRoom");
  regNodeBtn = new Button({
    label: "Register",
    onClick: function() {
      return regNodeDlg();
    }
  }, "dlg_regNode");
  regNodeBtn.startup();
  cancelNodeBtn = new Button({
    label: "Cancel",
    onClick: function() {
      return clearNode();
    }
  }, "dlg_regCancel");
  cancelNodeBtn.startup();
  clearNode = function() {
    var theDlg;
    theDlg = registry.byId("regDlg");
    nodeSelect.set("disabled", false);
    theDlg.reset();
    theDlg.hide();
    return registerGrid.refresh();
  };
  updateTimes = new CheckBox({
    id: "updateTimes"
  }, "updateTimes");
  updateTimes.startup();
  theBtn = new Button({
    onClick: function() {
      return showDlg();
    }
  }, "regNodeGrd");
  theBtn.startup();
  showDlg = function() {
    var foo;
    foo = registry.byId("regDlg");
    foo.show();
  };
  regNodeDlg = function() {
    var theDlg, theHouse, theNode, theRoom;
    theNode = nodeSelect.value;
    if (houseId) {
      theHouse = houseId;
    } else {
      theHouse = houseSelect.value;
    }
    theRoom = roomSelect.value;
    console.log("N " + theNode + " H " + theHouse + " R " + theRoom);
    theDlg = registry.byId("regDlg");
    if (!theDlg.validate()) {
      console.log("WARNING: Missing Data");
      return;
    }
    roomStore.query({
      name: theRoom
    }).then(function(roomObj) {
      var theObj;
      console.log("This Room", roomObj);
      if (roomObj.length === 0) {
        console.log("No Such Room");
        theObj = {
          "__table__": "Room",
          name: theRoom
        };
        return roomStore.add(theObj).then(function(theRoom) {
          console.log("New Room Id ", theRoom);
          return addLocation(theRoom.id, theNode);
        });
      } else {
        return addLocation(roomObj[0].id, theNode);
      }
    });
  };
  addLocation = function(theRoom, theNode) {
    console.log("Setting Up Location for: ", theRoom, " House ", houseId, "  Node: ", theNode);
    return locationStore.query({
      houseId: houseId,
      roomId: theRoom
    }).then(function(theLoc) {
      var theObj;
      console.log("Returned Location: ", theLoc);
      if (theLoc.length > 0) {
        return updateNodeLocation(theLoc[0].id, theNode);
      } else {
        theObj = {
          "__table__": "Location",
          houseId: houseId,
          roomId: theRoom
        };
        return locationStore.add(theObj).then(function(newLoc) {
          console.log("New Location ", newLoc);
          return updateNodeLocation(newLoc.id, theNode);
        });
      }
    });
  };
  updateNodeLocation = function(locationId, theNode) {
    console.log("Updating Node " + theNode + " to Location " + locationId);
    nodeStore.query({
      id: theNode
    }).then(function(storeNode) {
      var theObj;
      console.log("Returned Items from Node Store ", storeNode);
      if (storeNode.length > 0) {
        storeNode = storeNode[0];
        console.log("Node from Store ", storeNode);
        storeNode.locationId = locationId;
        return nodeStore.put(storeNode).then(function(obj) {
          console.log("Updated Store ", obj);
          return updateTimestamps(locationId, theNode);
        });
      } else {
        theObj = {
          "__table__": "Node",
          id: theNode,
          locationId: locationId
        };
        console.log("Adding New Node ", theObj);
        return nodeStore.add(theObj).then(function(obj) {
          console.log(obj);
          return updateTimestamps(locationId, theNode);
        });
      }
    });
  };
  updateTimestamps = function(locationId, theNode) {
    var chkValue;
    console.log("Times Checkbox ", updateTimes);
    chkValue = dijit.byId("updateTimes").checked;
    console.log("Check Value ", chkValue);
    if (chkValue === true) {
      console.log("Times Need Updating");
      ioScript.get({
        url: "../sumRest/updateTimes/",
        callbackParamName: "callback",
        content: {
          houseId: houseId,
          nodeId: theNode,
          locationId: locationId
        }
      });
      clearNode();
    } else {
      console.log("Leaving Times as Be");
      clearNode();
    }
  };
  out = parser.parse();
  console.log("Parsed ", out);
  console.log("BAR");
  unRegisterNode = function() {
    var fetchItem, id, row, selected, _results;
    console.log("Unregister Button Pressed");
    selected = registerGrid.selection;
    _results = [];
    for (id in selected) {
      row = registerGrid.row(id).data;
      console.log("ID: ", id, " Row ", row, " Node: ", row.node);
      row.locationId = null;
      fetchItem = nodeStore.query({
        id: row.node
      });
      console.log(fetchItem);
      _results.push(fetchItem.then(function(obj) {
        var theNode;
        console.log("Node from Store ", obj);
        theNode = obj[0];
        theNode.locationId = null;
        return nodeStore.put(theNode).then(function(out) {
          console.log("Updated Node ", out);
          return registerGrid.refresh();
        });
      }));
    }
    return _results;
  };
  statusGrid = new declare([OnDemandGrid, Keyboard, Selection, DijitRegistry])({
    columns: [
      {
        label: "Node",
        field: "node"
      }, {
        label: "Status",
        field: "status",
        formatter: statusFormatter
      }, {
        label: "Current House",
        field: "currentHouse"
      }, {
        label: "Current Room",
        field: "currentRoom"
      }, {
        label: "Last Tx",
        field: "lastTx",
        formatter: dateFormatter
      }, {
        label: "Voltage",
        field: "voltage",
        formatter: batteryFormatter
      }
    ],
    selectorType: "checkbox",
    store: statusStore,
    query: {
      cutTime: 30
    }
  }, "statusGrid");
  statusGrid.on("dgrid-datachange", function(evt) {
    console.log("Data changed: ", evt);
    Update(a(Value));
    return evt.cell.row.data.houseId = houseId;
  });
  statRegister = new Button({
    label: "Register Selected",
    onClick: function() {
      return procRegister();
    }
  }, "statRegister");
  statRefresh = new Button({
    label: "Refresh",
    onClick: function() {
      return statusGrid.refresh();
    }
  }, "statRefresh");
  procRegister = function() {
    return statusGrid.save();
  };
});
