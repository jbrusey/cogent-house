// Generated by CoffeeScript 1.3.3

require(["dgrid/OnDemandGrid", "dgrid/tree", "dojo/store/JsonRest", "dgrid/extensions/DijitRegistry", "dojo/_base/declare", "dijit/tree/ObjectStoreModel", "dijit/Tree", "dojo/domReady!"], function(Grid, tree, JsonRest, DijitRegistry, Declare, ObjectStoreModel, Tree) {
  var theModel, theTree, treeStore;
  console.log("Starting Tree Grid");
  treeStore = JsonRest({
    target: "rest/deploymenttree/",
    getChildren: function(object, options) {
      var theChildren;
      if (object.type === "house") {
        return [];
      }
      theChildren = this.query({
        parent: object.id
      });
      return theChildren;
    }
  });
  theModel = new ObjectStoreModel({
    store: treeStore
  });
  theTree = new Tree({
    model: theModel
  }, "treeNode");
  theTree.getIconClass = function(item, opened) {
    if (item.id === "root") {
      if (opened) {
        return "dijitFolderOpened";
      } else {
        return "dijitFolderClosed";
      }
    } else if (item.type === "deployment") {
      return "deployIcon";
    } else if (item.type === "house") {
      return "houseDarkIcon";
    } else if (item.type === "location") {
      return "locDarkIcon";
    }
    return "dijitLeaf";
  };
  theTree.startup();
});

require(["dijit/form/Button", "dijit/form/DateTextBox", "dijit/form/FilteringSelect", "dojo/store/Cache", "dojo/store/JsonRest", "dojo/store/Observable", "dojo/store/Memory", "dojo/ready", "dojo/topic", "dijit/form/RadioButton", "dojo/io-query", "dojo/domReady!"], function(Button, DateTextBox, Select, Cache, JsonRest, Observable, Memory, ready, topic, RadioButton, ioQuery) {
  var clearData, dailySelect, downloadBtn, getData, hourSelect, showData, startDateSelect, stopDateSelect, typeStore;
  typeStore = Cache(Observable(JsonRest({
    target: "./rest/sensortype/"
  })), Memory());
  startDateSelect = new DateTextBox({
    name: "startDate"
  }, "startDate");
  startDateSelect.startup();
  stopDateSelect = new DateTextBox({
    name: "stopDate"
  }, "stopDate");
  stopDateSelect.startup();
  hourSelect = new RadioButton({}, "hourlyRad");
  dailySelect = new RadioButton({
    checked: true
  }, "dailyRad");
  getData = new Button({
    label: "Get Data",
    onClick: function() {
      return showData();
    }
  }, "getData");
  getData.startup();
  clearData = new Button({
    label: "Clear",
    onClick: function() {
      startDateSelect.reset();
      stopDateSelect.reset();
      return sensorTypeSelect.reset();
    }
  }, "clearData");
  clearData.startup();
  downloadBtn = new Button({
    label: "Download",
    onClick: function() {
      return showData(true);
    }
  }, "download");
  return showData = function(download) {
    var content, item, linkString, queryString, queryparams, selEnd, selStart, selectedItems, splitItem, tag, theId, theTree, treeItems, url, _i, _len;
    if (download == null) {
      download = false;
    }
    theTree = dijit.byId("treeNode");
    treeItems = theTree.selectedItems;
    selectedItems = {
      "deployments": [],
      "houses": [],
      "locations": [],
      "locType": []
    };
    for (_i = 0, _len = treeItems.length; _i < _len; _i++) {
      item = treeItems[_i];
      if (item.id === "root") {
        return;
      } else {
        theId = item.id;
        splitItem = theId.split("_");
        console.log("Processing item ", item, "  Splits to ", splitItem);
        if (splitItem[0] === "d") {
          selectedItems.deployments.push(splitItem[1]);
        } else if (splitItem[0] === "h") {
          selectedItems.houses.push(splitItem[1]);
        }
      }
    }
    selStart = startDateSelect.get("value");
    selEnd = stopDateSelect.get("value");
    selectedItems.startDate = selStart;
    selectedItems.endDate = selEnd;
    if (dailySelect.get('value') === "on") {
      selectedItems.daily = true;
    }
    console.log("Element to be Published ", selectedItems);
    url = "../sumRestDL/electric/";
    content = {
      id: selectedItems.houses[0],
      daily: selectedItems.daily,
      csv: true
    };
    queryparams = ioQuery.objectToQuery(content);
    queryString = url + "?" + queryparams;
    console.log(queryString);
    linkString = "<a href='" + queryString + "' target='_blank'>Download</a>";
    tag = dojo.byId("dlUrl");
    tag.innerHTML = linkString;
    return topic.publish("navTree", selectedItems);
  };
});

require(["dojo/store/JsonRest", "dojo/store/Cache", "dojo/store/Observable", "dojo/store/Memory", "dgrid/OnDemandGrid", "dgrid/Keyboard", "dgrid/Selection", "dgrid/editor", "dgrid/extensions/DijitRegistry", "dojo/_base/declare", "dojo/topic", "dojo/io/script"], function(jsonRest, Cache, Observable, Memory, OnDemandGrid, Keyboard, Selection, editor, DijitRegistry, declare, topic, ioScript) {
  var baseGrid, dataGrid, elecStore, plotData, summaryGrid;
  console.log("Starting Grids");
  baseGrid = new declare([OnDemandGrid, Keyboard, Selection, DijitRegistry]);
  summaryGrid = baseGrid({
    columns: [
      {
        label: "Parameter",
        field: "param"
      }, {
        label: "Value",
        field: "value"
      }
    ]
  }, "sumGrid");
  elecStore = Cache(Observable(jsonRest({
    target: "../sumRest/electric/"
  })), Memory());
  dataGrid = baseGrid({
    columns: [
      {
        label: "Time",
        field: "date"
      }, {
        label: "kWh",
        field: "kWh"
      }, {
        label: "event",
        field: "event"
      }
    ],
    store: elecStore,
    query: {
      daily: true
    }
  }, "dataGrid");
  topic.subscribe("navTree", function(args) {
    var houseId, theData, theSummary;
    console.log("--- FIRED --- ", args);
    houseId = args.houses[0];
    console.log("House Id", houseId, "Daily", args.daily);
    dataGrid.setQuery({
      id: houseId,
      daily: args.daily
    });
    theData = [];
    theSummary = {
      pre: {
        sum: 0.0,
        count: 0
      },
      post: {
        sum: 0.0,
        count: 0
      }
    };
    elecStore.query({
      id: houseId,
      daily: args.daily
    }).then(function(data) {
      var item, kWh, values, _i, _len;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        kWh = item.kWh;
        values = [item.time, item.kWh];
        theData.push(values);
        if (item.event === "PRE") {
          theSummary.pre.sum += kWh;
          theSummary.pre.count += 1;
        } else if (item.event === "POST") {
          theSummary.post.sum += kWh;
          theSummary.post.count += 1;
        }
      }
      console.log(theSummary);
      plotData(theData);
    });
  });
  plotData = function(theData) {
    var chart, options;
    options = {
      chart: {
        renderTo: "theGraph"
      },
      title: {
        text: "Title"
      }
    };
    options.series = [
      {
        name: "The Data",
        type: "column",
        data: theData
      }
    ];
    chart = new Highcharts.StockChart(options);
    console.log("----> TS DONE", options);
  };
});
