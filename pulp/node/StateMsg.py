#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'StateMsg'
# message type.
#

import tinyos3.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 76

# The Active Message type associated with this message.
AM_TYPE = 7


class StateMsg(tinyos3.message.Message.Message):
    # Create a new StateMsg of size 76.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=76):
        tinyos3.message.Message.Message.__init__(
            self, data, addr, gid, base_offset, data_length
        )
        self.amTypeSet(AM_TYPE)

    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE

    get_amType = classmethod(get_amType)

    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <StateMsg> \n"
        try:
            s += "  [ctp_parent_id=0x%x]\n" % (self.get_ctp_parent_id())
        except:
            pass
        try:
            s += "  [timestamp=0x%x]\n" % (self.get_timestamp())
        except:
            pass
        try:
            s += "  [special=0x%x]\n" % (self.get_special())
        except:
            pass
        try:
            s += "  [seq=0x%x]\n" % (self.get_seq())
        except:
            pass
        try:
            s += "  [rssi=0x%x]\n" % (self.get_rssi())
        except:
            pass
        try:
            s += "  [packed_state_mask="
            for i in range(0, 6):
                s += "0x%x " % (self.getElement_packed_state_mask(i) & 0xFF)
            s += "]\n"
        except:
            pass
        try:
            s += "  [packed_state="
            for i in range(0, 15):
                s += "%f " % (self.getElement_packed_state(i))
            s += "]\n"
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: ctp_parent_id
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'ctp_parent_id' is signed (True).
    #
    def isSigned_ctp_parent_id(self):
        return True

    #
    # Return whether the field 'ctp_parent_id' is an array (False).
    #
    def isArray_ctp_parent_id(self):
        return False

    #
    # Return the offset (in bytes) of the field 'ctp_parent_id'
    #
    def offset_ctp_parent_id(self):
        return 0 / 8

    #
    # Return the offset (in bits) of the field 'ctp_parent_id'
    #
    def offsetBits_ctp_parent_id(self):
        return 0

    #
    # Return the value (as a int) of the field 'ctp_parent_id'
    #
    def get_ctp_parent_id(self):
        return self.getUIntElement(self.offsetBits_ctp_parent_id(), 16, 1)

    #
    # Set the value of the field 'ctp_parent_id'
    #
    def set_ctp_parent_id(self, value):
        self.setUIntElement(self.offsetBits_ctp_parent_id(), 16, value, 1)

    #
    # Return the size, in bytes, of the field 'ctp_parent_id'
    #
    def size_ctp_parent_id(self):
        return 16 / 8

    #
    # Return the size, in bits, of the field 'ctp_parent_id'
    #
    def sizeBits_ctp_parent_id(self):
        return 16

    #
    # Accessor methods for field: timestamp
    #   Field type: long
    #   Offset (bits): 16
    #   Size (bits): 32
    #

    #
    # Return whether the field 'timestamp' is signed (True).
    #
    def isSigned_timestamp(self):
        return True

    #
    # Return whether the field 'timestamp' is an array (False).
    #
    def isArray_timestamp(self):
        return False

    #
    # Return the offset (in bytes) of the field 'timestamp'
    #
    def offset_timestamp(self):
        return 16 / 8

    #
    # Return the offset (in bits) of the field 'timestamp'
    #
    def offsetBits_timestamp(self):
        return 16

    #
    # Return the value (as a long) of the field 'timestamp'
    #
    def get_timestamp(self):
        return self.getUIntElement(self.offsetBits_timestamp(), 32, 1)

    #
    # Set the value of the field 'timestamp'
    #
    def set_timestamp(self, value):
        self.setUIntElement(self.offsetBits_timestamp(), 32, value, 1)

    #
    # Return the size, in bytes, of the field 'timestamp'
    #
    def size_timestamp(self):
        return 32 / 8

    #
    # Return the size, in bits, of the field 'timestamp'
    #
    def sizeBits_timestamp(self):
        return 32

    #
    # Accessor methods for field: special
    #   Field type: short
    #   Offset (bits): 48
    #   Size (bits): 8
    #

    #
    # Return whether the field 'special' is signed (True).
    #
    def isSigned_special(self):
        return True

    #
    # Return whether the field 'special' is an array (False).
    #
    def isArray_special(self):
        return False

    #
    # Return the offset (in bytes) of the field 'special'
    #
    def offset_special(self):
        return 48 / 8

    #
    # Return the offset (in bits) of the field 'special'
    #
    def offsetBits_special(self):
        return 48

    #
    # Return the value (as a short) of the field 'special'
    #
    def get_special(self):
        return self.getUIntElement(self.offsetBits_special(), 8, 1)

    #
    # Set the value of the field 'special'
    #
    def set_special(self, value):
        self.setUIntElement(self.offsetBits_special(), 8, value, 1)

    #
    # Return the size, in bytes, of the field 'special'
    #
    def size_special(self):
        return 8 / 8

    #
    # Return the size, in bits, of the field 'special'
    #
    def sizeBits_special(self):
        return 8

    #
    # Accessor methods for field: seq
    #   Field type: short
    #   Offset (bits): 56
    #   Size (bits): 8
    #

    #
    # Return whether the field 'seq' is signed (True).
    #
    def isSigned_seq(self):
        return True

    #
    # Return whether the field 'seq' is an array (False).
    #
    def isArray_seq(self):
        return False

    #
    # Return the offset (in bytes) of the field 'seq'
    #
    def offset_seq(self):
        return 56 / 8

    #
    # Return the offset (in bits) of the field 'seq'
    #
    def offsetBits_seq(self):
        return 56

    #
    # Return the value (as a short) of the field 'seq'
    #
    def get_seq(self):
        return self.getUIntElement(self.offsetBits_seq(), 8, 1)

    #
    # Set the value of the field 'seq'
    #
    def set_seq(self, value):
        self.setUIntElement(self.offsetBits_seq(), 8, value, 1)

    #
    # Return the size, in bytes, of the field 'seq'
    #
    def size_seq(self):
        return 8 / 8

    #
    # Return the size, in bits, of the field 'seq'
    #
    def sizeBits_seq(self):
        return 8

    #
    # Accessor methods for field: rssi
    #   Field type: short
    #   Offset (bits): 64
    #   Size (bits): 16
    #

    #
    # Return whether the field 'rssi' is signed (True).
    #
    def isSigned_rssi(self):
        return True

    #
    # Return whether the field 'rssi' is an array (False).
    #
    def isArray_rssi(self):
        return False

    #
    # Return the offset (in bytes) of the field 'rssi'
    #
    def offset_rssi(self):
        return 64 / 8

    #
    # Return the offset (in bits) of the field 'rssi'
    #
    def offsetBits_rssi(self):
        return 64

    #
    # Return the value (as a short) of the field 'rssi'
    #
    def get_rssi(self):
        return self.getSIntElement(self.offsetBits_rssi(), 16, 1)

    #
    # Set the value of the field 'rssi'
    #
    def set_rssi(self, value):
        self.setSIntElement(self.offsetBits_rssi(), 16, value, 1)

    #
    # Return the size, in bytes, of the field 'rssi'
    #
    def size_rssi(self):
        return 16 / 8

    #
    # Return the size, in bits, of the field 'rssi'
    #
    def sizeBits_rssi(self):
        return 16

    #
    # Accessor methods for field: packed_state_mask
    #   Field type: short[]
    #   Offset (bits): 80
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'packed_state_mask' is signed (True).
    #
    def isSigned_packed_state_mask(self):
        return True

    #
    # Return whether the field 'packed_state_mask' is an array (True).
    #
    def isArray_packed_state_mask(self):
        return True

    #
    # Return the offset (in bytes) of the field 'packed_state_mask'
    #
    def offset_packed_state_mask(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 6:
            raise IndexError
        offset += 0 + index1 * 8
        return offset / 8

    #
    # Return the offset (in bits) of the field 'packed_state_mask'
    #
    def offsetBits_packed_state_mask(self, index1):
        offset = 80
        if index1 < 0 or index1 >= 6:
            raise IndexError
        offset += 0 + index1 * 8
        return offset

    #
    # Return the entire array 'packed_state_mask' as a short[]
    #
    def get_packed_state_mask(self):
        tmp = [None] * 6
        for index0 in range(0, self.numElements_packed_state_mask(0)):
            tmp[index0] = self.getElement_packed_state_mask(index0)
        return tmp

    #
    # Set the contents of the array 'packed_state_mask' from the given short[]
    #
    def set_packed_state_mask(self, value):
        for index0 in range(0, len(value)):
            self.setElement_packed_state_mask(index0, value[index0])

    #
    # Return an element (as a short) of the array 'packed_state_mask'
    #
    def getElement_packed_state_mask(self, index1):
        return self.getUIntElement(self.offsetBits_packed_state_mask(index1), 8, 1)

    #
    # Set an element of the array 'packed_state_mask'
    #
    def setElement_packed_state_mask(self, index1, value):
        self.setUIntElement(self.offsetBits_packed_state_mask(index1), 8, value, 1)

    #
    # Return the total size, in bytes, of the array 'packed_state_mask'
    #
    def totalSize_packed_state_mask(self):
        return 48 / 8

    #
    # Return the total size, in bits, of the array 'packed_state_mask'
    #
    def totalSizeBits_packed_state_mask(self):
        return 48

    #
    # Return the size, in bytes, of each element of the array 'packed_state_mask'
    #
    def elementSize_packed_state_mask(self):
        return 8 / 8

    #
    # Return the size, in bits, of each element of the array 'packed_state_mask'
    #
    def elementSizeBits_packed_state_mask(self):
        return 8

    #
    # Return the number of dimensions in the array 'packed_state_mask'
    #
    def numDimensions_packed_state_mask(self):
        return 1

    #
    # Return the number of elements in the array 'packed_state_mask'
    #
    def numElements_packed_state_mask():
        return 6

    #
    # Return the number of elements in the array 'packed_state_mask'
    # for the given dimension.
    #
    def numElements_packed_state_mask(self, dimension):
        array_dims = [
            6,
        ]
        if dimension < 0 or dimension >= 1:
            raise IndexError
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]

    #
    # Fill in the array 'packed_state_mask' with a String
    #
    def setString_packed_state_mask(self, s):
        l = len(s)
        for i in range(0, l):
            self.setElement_packed_state_mask(i, ord(s[i]))
        self.setElement_packed_state_mask(l, 0)  # null terminate

    #
    # Read the array 'packed_state_mask' as a String
    #
    def getString_packed_state_mask(self):
        carr = ""
        for i in range(0, 4000):
            if self.getElement_packed_state_mask(i) == chr(0):
                break
            carr += self.getElement_packed_state_mask(i)
        return carr

    #
    # Accessor methods for field: packed_state
    #   Field type: float[]
    #   Offset (bits): 128
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'packed_state' is signed (True).
    #
    def isSigned_packed_state(self):
        return True

    #
    # Return whether the field 'packed_state' is an array (True).
    #
    def isArray_packed_state(self):
        return True

    #
    # Return the offset (in bytes) of the field 'packed_state'
    #
    def offset_packed_state(self, index1):
        offset = 128
        if index1 < 0 or index1 >= 15:
            raise IndexError
        offset += 0 + index1 * 32
        return offset / 8

    #
    # Return the offset (in bits) of the field 'packed_state'
    #
    def offsetBits_packed_state(self, index1):
        offset = 128
        if index1 < 0 or index1 >= 15:
            raise IndexError
        offset += 0 + index1 * 32
        return offset

    #
    # Return the entire array 'packed_state' as a float[]
    #
    def get_packed_state(self):
        tmp = [None] * 15
        for index0 in range(0, self.numElements_packed_state(0)):
            tmp[index0] = self.getElement_packed_state(index0)
        return tmp

    #
    # Set the contents of the array 'packed_state' from the given float[]
    #
    def set_packed_state(self, value):
        for index0 in range(0, len(value)):
            self.setElement_packed_state(index0, value[index0])

    #
    # Return an element (as a float) of the array 'packed_state'
    #
    def getElement_packed_state(self, index1):
        return self.getFloatElement(self.offsetBits_packed_state(index1), 32, 0)

    #
    # Set an element of the array 'packed_state'
    #
    def setElement_packed_state(self, index1, value):
        self.setFloatElement(self.offsetBits_packed_state(index1), 32, value, 0)

    #
    # Return the total size, in bytes, of the array 'packed_state'
    #
    def totalSize_packed_state(self):
        return 480 / 8

    #
    # Return the total size, in bits, of the array 'packed_state'
    #
    def totalSizeBits_packed_state(self):
        return 480

    #
    # Return the size, in bytes, of each element of the array 'packed_state'
    #
    def elementSize_packed_state(self):
        return 32 / 8

    #
    # Return the size, in bits, of each element of the array 'packed_state'
    #
    def elementSizeBits_packed_state(self):
        return 32

    #
    # Return the number of dimensions in the array 'packed_state'
    #
    def numDimensions_packed_state(self):
        return 1

    #
    # Return the number of elements in the array 'packed_state'
    #
    def numElements_packed_state():
        return 15

    #
    # Return the number of elements in the array 'packed_state'
    # for the given dimension.
    #
    def numElements_packed_state(self, dimension):
        array_dims = [
            15,
        ]
        if dimension < 0 or dimension >= 1:
            raise IndexError
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]
