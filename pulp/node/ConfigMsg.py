#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'ConfigMsg'
# message type.
#

import tinyos3.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 130

# The Active Message type associated with this message.
AM_TYPE = 5


class ConfigMsg(tinyos3.message.Message.Message):
    # Create a new ConfigMsg of size 130.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=130):
        tinyos3.message.Message.Message.__init__(
            self, data, addr, gid, base_offset, data_length
        )
        self.amTypeSet(AM_TYPE)

    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE

    get_amType = classmethod(get_amType)

    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <ConfigMsg> \n"
        try:
            s += "  [typeCount=0x%x]\n" % (self.get_typeCount())
        except:
            pass
        try:
            s += "  [byType.samplePeriod="
            for i in range(0, 16):
                s += "0x%x " % (self.getElement_byType_samplePeriod(i) & 0xFFFFFFFF)
            s += "]\n"
        except:
            pass
        try:
            s += "  [byType.blink="
            for i in range(0, 16):
                s += "0x%x " % (self.getElement_byType_blink(i) & 0xFF)
            s += "]\n"
        except:
            pass
        try:
            pass
        except:
            pass
        try:
            s += "  [special=0x%x]\n" % (self.get_special())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: typeCount
    #   Field type: short
    #   Offset (bits): 0
    #   Size (bits): 8
    #

    #
    # Return whether the field 'typeCount' is signed (False).
    #
    def isSigned_typeCount(self):
        return False

    #
    # Return whether the field 'typeCount' is an array (False).
    #
    def isArray_typeCount(self):
        return False

    #
    # Return the offset (in bytes) of the field 'typeCount'
    #
    def offset_typeCount(self):
        return 0 / 8

    #
    # Return the offset (in bits) of the field 'typeCount'
    #
    def offsetBits_typeCount(self):
        return 0

    #
    # Return the value (as a short) of the field 'typeCount'
    #
    def get_typeCount(self):
        return self.getUIntElement(self.offsetBits_typeCount(), 8, 1)

    #
    # Set the value of the field 'typeCount'
    #
    def set_typeCount(self, value):
        self.setUIntElement(self.offsetBits_typeCount(), 8, value, 1)

    #
    # Return the size, in bytes, of the field 'typeCount'
    #
    def size_typeCount(self):
        return 8 / 8

    #
    # Return the size, in bits, of the field 'typeCount'
    #
    def sizeBits_typeCount(self):
        return 8

    #
    # Accessor methods for field: byType.samplePeriod
    #   Field type: long[]
    #   Offset (bits): 0
    #   Size of each element (bits): 32
    #

    #
    # Return whether the field 'byType.samplePeriod' is signed (False).
    #
    def isSigned_byType_samplePeriod(self):
        return False

    #
    # Return whether the field 'byType.samplePeriod' is an array (True).
    #
    def isArray_byType_samplePeriod(self):
        return True

    #
    # Return the offset (in bytes) of the field 'byType.samplePeriod'
    #
    def offset_byType_samplePeriod(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        return offset / 8

    #
    # Return the offset (in bits) of the field 'byType.samplePeriod'
    #
    def offsetBits_byType_samplePeriod(self, index1):
        offset = 0
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        return offset

    #
    # Return the entire array 'byType.samplePeriod' as a long[]
    #
    def get_byType_samplePeriod(self):
        tmp = [None] * 16
        for index0 in range(0, self.numElements_byType_samplePeriod(0)):
            tmp[index0] = self.getElement_byType_samplePeriod(index0)
        return tmp

    #
    # Set the contents of the array 'byType.samplePeriod' from the given long[]
    #
    def set_byType_samplePeriod(self, value):
        for index0 in range(0, len(value)):
            self.setElement_byType_samplePeriod(index0, value[index0])

    #
    # Return an element (as a long) of the array 'byType.samplePeriod'
    #
    def getElement_byType_samplePeriod(self, index1):
        return self.getUIntElement(self.offsetBits_byType_samplePeriod(index1), 32, 1)

    #
    # Set an element of the array 'byType.samplePeriod'
    #
    def setElement_byType_samplePeriod(self, index1, value):
        self.setUIntElement(self.offsetBits_byType_samplePeriod(index1), 32, value, 1)

    #
    # Return the total size, in bytes, of the array 'byType.samplePeriod'
    #
    def totalSize_byType_samplePeriod(self):
        return 1024 / 8

    #
    # Return the total size, in bits, of the array 'byType.samplePeriod'
    #
    def totalSizeBits_byType_samplePeriod(self):
        return 1024

    #
    # Return the size, in bytes, of each element of the array 'byType.samplePeriod'
    #
    def elementSize_byType_samplePeriod(self):
        return 32 / 8

    #
    # Return the size, in bits, of each element of the array 'byType.samplePeriod'
    #
    def elementSizeBits_byType_samplePeriod(self):
        return 32

    #
    # Return the number of dimensions in the array 'byType.samplePeriod'
    #
    def numDimensions_byType_samplePeriod(self):
        return 1

    #
    # Return the number of elements in the array 'byType.samplePeriod'
    #
    def numElements_byType_samplePeriod():
        return 16

    #
    # Return the number of elements in the array 'byType.samplePeriod'
    # for the given dimension.
    #
    def numElements_byType_samplePeriod(self, dimension):
        array_dims = [
            16,
        ]
        if dimension < 0 or dimension >= 1:
            raise IndexError
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]

    #
    # Accessor methods for field: byType.blink
    #   Field type: byte[]
    #   Offset (bits): 32
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'byType.blink' is signed (False).
    #
    def isSigned_byType_blink(self):
        return False

    #
    # Return whether the field 'byType.blink' is an array (True).
    #
    def isArray_byType_blink(self):
        return True

    #
    # Return the offset (in bytes) of the field 'byType.blink'
    #
    def offset_byType_blink(self, index1):
        offset = 32
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        return offset / 8

    #
    # Return the offset (in bits) of the field 'byType.blink'
    #
    def offsetBits_byType_blink(self, index1):
        offset = 32
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        return offset

    #
    # Return the entire array 'byType.blink' as a byte[]
    #
    def get_byType_blink(self):
        tmp = [None] * 16
        for index0 in range(0, self.numElements_byType_blink(0)):
            tmp[index0] = self.getElement_byType_blink(index0)
        return tmp

    #
    # Set the contents of the array 'byType.blink' from the given byte[]
    #
    def set_byType_blink(self, value):
        for index0 in range(0, len(value)):
            self.setElement_byType_blink(index0, value[index0])

    #
    # Return an element (as a byte) of the array 'byType.blink'
    #
    def getElement_byType_blink(self, index1):
        return self.getSIntElement(self.offsetBits_byType_blink(index1), 8, 1)

    #
    # Set an element of the array 'byType.blink'
    #
    def setElement_byType_blink(self, index1, value):
        self.setSIntElement(self.offsetBits_byType_blink(index1), 8, value, 1)

    #
    # Return the total size, in bytes, of the array 'byType.blink'
    #
    def totalSize_byType_blink(self):
        return 1024 / 8

    #
    # Return the total size, in bits, of the array 'byType.blink'
    #
    def totalSizeBits_byType_blink(self):
        return 1024

    #
    # Return the size, in bytes, of each element of the array 'byType.blink'
    #
    def elementSize_byType_blink(self):
        return 8 / 8

    #
    # Return the size, in bits, of each element of the array 'byType.blink'
    #
    def elementSizeBits_byType_blink(self):
        return 8

    #
    # Return the number of dimensions in the array 'byType.blink'
    #
    def numDimensions_byType_blink(self):
        return 1

    #
    # Return the number of elements in the array 'byType.blink'
    #
    def numElements_byType_blink():
        return 16

    #
    # Return the number of elements in the array 'byType.blink'
    # for the given dimension.
    #
    def numElements_byType_blink(self, dimension):
        array_dims = [
            16,
        ]
        if dimension < 0 or dimension >= 1:
            raise IndexError
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]

    #
    # Fill in the array 'byType.blink' with a String
    #
    def setString_byType_blink(self, s):
        l = len(s)
        for i in range(0, l):
            self.setElement_byType_blink(i, ord(s[i]))
        self.setElement_byType_blink(l, 0)  # null terminate

    #
    # Read the array 'byType.blink' as a String
    #
    def getString_byType_blink(self):
        carr = ""
        for i in range(0, 4000):
            if self.getElement_byType_blink(i) == chr(0):
                break
            carr += self.getElement_byType_blink(i)
        return carr

    #
    # Accessor methods for field: byType.configured
    #   Field type: short[][]
    #   Offset (bits): 40
    #   Size of each element (bits): 8
    #

    #
    # Return whether the field 'byType.configured' is signed (False).
    #
    def isSigned_byType_configured(self):
        return False

    #
    # Return whether the field 'byType.configured' is an array (True).
    #
    def isArray_byType_configured(self):
        return True

    #
    # Return the offset (in bytes) of the field 'byType.configured'
    #
    def offset_byType_configured(self, index1, index2):
        offset = 40
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        if index2 < 0 or index2 >= 3:
            raise IndexError
        offset += 0 + index2 * 8
        return offset / 8

    #
    # Return the offset (in bits) of the field 'byType.configured'
    #
    def offsetBits_byType_configured(self, index1, index2):
        offset = 40
        if index1 < 0 or index1 >= 16:
            raise IndexError
        offset += 8 + index1 * 64
        if index2 < 0 or index2 >= 3:
            raise IndexError
        offset += 0 + index2 * 8
        return offset

    #
    # Return the entire array 'byType.configured' as a short[][]
    #
    def get_byType_configured(self):
        tmp = [[None] * 16] * 3
        for index0 in range(0, self.numElements_byType_configured(0)):
            for index1 in range(0, self.numElements_byType_configured(1)):
                tmp[index0][index1] = self.getElement_byType_configured(index0, index1)
        return tmp

    #
    # Set the contents of the array 'byType.configured' from the given short[][]
    #
    def set_byType_configured(self, value):
        for index0 in range(0, len(value)):
            for index1 in range(0, len(value)):
                self.setElement_byType_configured(index0, index1, value[index0][index1])

    #
    # Return an element (as a short) of the array 'byType.configured'
    #
    def getElement_byType_configured(self, index1, index2):
        return self.getUIntElement(
            self.offsetBits_byType_configured(index1, index2), 8, 1
        )

    #
    # Set an element of the array 'byType.configured'
    #
    def setElement_byType_configured(self, index1, index2, value):
        self.setUIntElement(
            self.offsetBits_byType_configured(index1, index2), 8, value, 1
        )

    #
    # Return the total size, in bytes, of the array 'byType.configured'
    #
    def totalSize_byType_configured(self):
        return 1024 / 8

    #
    # Return the total size, in bits, of the array 'byType.configured'
    #
    def totalSizeBits_byType_configured(self):
        return 1024

    #
    # Return the size, in bytes, of each element of the array 'byType.configured'
    #
    def elementSize_byType_configured(self):
        return 8 / 8

    #
    # Return the size, in bits, of each element of the array 'byType.configured'
    #
    def elementSizeBits_byType_configured(self):
        return 8

    #
    # Return the number of dimensions in the array 'byType.configured'
    #
    def numDimensions_byType_configured(self):
        return 2

    #
    # Return the number of elements in the array 'byType.configured'
    # for the given dimension.
    #
    def numElements_byType_configured(self, dimension):
        array_dims = [
            16,
            3,
        ]
        if dimension < 0 or dimension >= 2:
            raise IndexError
        if array_dims[dimension] == 0:
            raise IndexError
        return array_dims[dimension]

    #
    # Accessor methods for field: special
    #   Field type: short
    #   Offset (bits): 1032
    #   Size (bits): 8
    #

    #
    # Return whether the field 'special' is signed (False).
    #
    def isSigned_special(self):
        return False

    #
    # Return whether the field 'special' is an array (False).
    #
    def isArray_special(self):
        return False

    #
    # Return the offset (in bytes) of the field 'special'
    #
    def offset_special(self):
        return 1032 / 8

    #
    # Return the offset (in bits) of the field 'special'
    #
    def offsetBits_special(self):
        return 1032

    #
    # Return the value (as a short) of the field 'special'
    #
    def get_special(self):
        return self.getUIntElement(self.offsetBits_special(), 8, 1)

    #
    # Set the value of the field 'special'
    #
    def set_special(self, value):
        self.setUIntElement(self.offsetBits_special(), 8, value, 1)

    #
    # Return the size, in bytes, of the field 'special'
    #
    def size_special(self):
        return 8 / 8

    #
    # Return the size, in bits, of the field 'special'
    #
    def sizeBits_special(self):
        return 8
