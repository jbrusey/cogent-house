.. include:: <isonum.txt>

.. {r setup, include=FALSE}

   #fig.path = paste("figure/", houseStr, sep = ""),
   #House Id to fetch data for
   hId = 7

   #out.width=".9\\textwidth",
   opts_chunk$set(           
      dev="png", 
      fig.lp = "fig:",
      fig.path = "fig-",
      fig.keep="high",
      fig.show="hold",
      fig.align="center",
      fig.width=13.0,
      fig.height=7.0,
      comment=NA)

   

   opts_chunk$set(aliases=c(h='fig.height',
			    w='fig.width',
   			    cap='fig.cap',
			    scap='fig.scap'))

   ##options(width = 75)
   ##opts_chunk$set(cache=TRUE, fig.width=5, fig.height=5)



.. {r external-code, cache=FALSE, include=FALSE}
    read_chunk('getDeploymentData.R')
.. ..


.. .. {r loaddeps, include=FALSE}
..  #Load our R dependencies
.. .. .. 


.. .. {r fetchData, include=FALSE}
.. # Fetch Data, Calibrate and Remove Data
.. .. ..


#########################################
Deployment Report :r:`thisHouse$address`
#########################################

********************
Deployment Overview
********************

.. {r houseSummary, include=FALSE}
.. ..

Deployment Details
===================

This section gives an overview of the deployment details

* Deployment Id: :r:`thisHouse$id`
* Deployment Start Date: :r:`as.character(thisHouse$sd)`
* Deployment End: :r:`as.character(thisHouse$ed)`
* Deployment Length: :r:`as.period(deployRange) %/% days(1)` Days
* Data Start: :r:`as.character(dataStart)`
* Data End: :r:`as.character(dataEnd)`
* Data Length :r:`as.period(dateRange) %/% days(1)` Days

.. {r dateBlock, echo=FALSE}
    if (abs(deployRange %/% days(1) - dateRange %/% days(1)) > 1) {
        warning("Date Ranges do not match please check your data")
       }
.. ..

Node Summary
=============

This section gives an overview of the nodes used in the deployment.
In total there were **:r:`numNodes`** deployed in **:r:`numLocs`** locations.

.. {r nodeTable, results='asis', echo=FALSE}
   pandoc.table(nodeSum,style="grid")
.. ..


Yield Summary
==============

This section gives details of the node yield. 

Yield is shown as a percentage of the total expected samples per node received
and stored at the base station.

Given the standard 5 minute sampling period it is expected that the base station
will receive *288* samples per node per day. The daily yield per sensor is
calculated through *received samples \ 288 100*

When examining daily yield it is important to note that the first and last days
of the deployment will show yield below 100%, this is due to the equipment being
installed or removed on these days, and thus a incomplete data set for that day
being available.

.. {r yieldCalcs, include=FALSE}
.. ..

.. {r yieldGraph, fig.cap="Per Node Yield Overview", echo=FALSE}
#Our first graph
#And an Overview Graph
plt <- ggplot(yieldTable,aes(location,Yield))
plt <- plt+geom_bar(stat="identity",fill="white",color="darkgreen")
plt <- plt+geom_hline(yintercept=90)
plt <- plt+theme_bw()
plt <- plt+theme(axis.text.x=element_text(angle=90))
plt

.. ..

When examining node yield, a *heatmap* plot can help identify node or periods
whith lower than expected yield.  In this type of plot, darker regions indicate
lower yield.  Note: It is expected that the first and last colums will show
lower than 100% yield, as the deploymment setup / tear down means that less than
a full day of data is available.

.. {r yieldHeatmap, fig.cap="Yield Heatmap", echo=FALSE}

plt <- ggplot(yieldHeatmap,aes(Date,location,fill=yield))
plt <- plt + geom_tile(color="white")
plt <- plt + xlab("Date") + ylab("Location")
plt <- plt + scale_fill_gradient(limits=c(0,110))
plt

.. ..

****************
Data Summary
****************

This next section gives details of the environmental parameters monitoried during the deployyment.

Temperature Data
=================

.. {r tempData, include=FALSE}
.. ..


Table [temptable] gives an overview of the collected temperature data: The
average monitoried temperature during the deployment was:
:r:`mean(summary$Average)` |deg| C, with a range of :r:`min(summary$Minimum)` -
:r:`max(summary$Maximum)` |deg| C.

.. {r tempTable, echo=FALSE, results='asis'}
   pandoc.table(summary,style="grid", caption="Temperature Data Summary #temptable")
.. .. 

The following graphs show the temperature datastreams for the monitoring period

.. {r tempGraphs, echo=FALSE, fig.cap="Temperature Data Traces"}

plt <- ggplot(ss,aes(ts,calibValue,color=factor(nodeId)))
plt <- plt+geom_line()
plt <- plt+xlab("Date") + ylab("Temperature")
plt <- plt + theme_bw()
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$sd)))
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$ed)))
plt <- plt + facet_grid(location~.)
plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="none")
plt

.. ..

Temperature Exposure
---------------------

Temperature exposure is defined as the percentage of samples that fall into each
comfort band (as defined by the ASHRE standard). Figure XXX shows the comfort
levels for each room in the property.

.. {r tempExposeGraph, echo=FALSE, fig.cap="Temperature Exposure"}

plt <- ggplot(expose,aes(location,p,fill=comfort))
plt <- plt+geom_bar(stat="identity")
#plt <- plt+geom_text(data=exposeLab,aes(location,tpos,label=label,size=8))
plt <- plt+scale_fill_manual("Comfort Level",values=rev(brewer.pal(n=6, "RdYlBu")))
plt <- plt+xlab("Room")
plt <- plt+ylab("Percentage of samples at this level")
plt <- plt+guides(size=FALSE)
plt <- plt+theme_bw()
plt <- plt+theme(legend.position="top",axis.text.x=element_text(angle=90),legend.title=element_blank())
plt

.. ..


.. {r tempExposeTable,echo=FALSE,results='asis'}

    pandoc.table(exposeFlat,style="grid", caption="Temperature Exposure Summary #temptable")

.. ..

Humidity Data
=================

.. {r humData, include=FALSE}
.. ..

Table gives an overview of the collected humidity data: The
average monitoried temperature during the deployment was:
:r:`mean(summary$Average)` %RH, with a range of :r:`min(summary$Minimum)` -
:r:`max(summary$Maximum)` %RH.

.. {r humTable, echo=FALSE, results='asis'}
   pandoc.table(summary,style="grid", caption="Humidity Data Summary #temptable")
.. .. 

The following graphs show the humidity datastreams for the monitoring period

.. {r humGraphs, echo=FALSE, fig.cap="Humidity Data Traces"}

plt <- ggplot(ss,aes(ts,calibValue,color=factor(nodeId)))
plt <- plt+geom_line()
plt <- plt+xlab("Date") + ylab("Humidity")
plt <- plt + theme_bw()
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$sd)))
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$ed)))
plt <- plt + facet_grid(location~.)
plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="none")
plt

.. ..

Humidity Comfort Data
----------------------

Humidity exposure is defined as the percentage of samples that fall into each
comfort band (as defined by the ASHRE standard). Figure XXX shows the comfort
levels for each room in the property.

.. {r humExposeGraph, echo=FALSE, fig.cap="Humidity Exposure"}

plt <- ggplot(expose,aes(location,p,fill=comfort))
plt <- plt+geom_bar(stat="identity")
#plt <- plt+geom_text(data=exposeLab,aes(location,tpos,label=label,size=8))
plt <- plt+scale_fill_manual("Comfort Level",values=rev(brewer.pal(n=6, "RdYlBu")))
plt <- plt+xlab("Room")
plt <- plt+ylab("Percentage of samples at this level")
plt <- plt+guides(size=FALSE)
plt <- plt+theme_bw()
plt <- plt+theme(legend.position="top",axis.text.x=element_text(angle=90),legend.title=element_blank())
plt

.. ..



.. {r humExposeTable,echo=FALSE,results='asis'}

    pandoc.table(exposeFlat,style="grid", caption="Humidity Exposure Summary")

.. ..


Other Environmental Data
==========================

This section examines other envionmental data collected during the deployment.

.. {r otherData, include=FALSE}

.. ..

.. {r otherTable, echo=FALSE, results='asis'}
pandoc.table(summary,style="grid", caption="Other Data Summary")
.. .. 

.. {r otherGraph, echo=FALSE}
plt <- ggplot(ss,aes(ts,calibValue,color=factor(nodeId)))
plt <- plt+geom_line()
plt <- plt+xlab("Date") + ylab("Reading")
plt <- plt + theme_bw()
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$sd))) #Start Date
plt <- plt+geom_vline(aes(xintercept=as.numeric(thisHouse$ed))) #End Date
plt <- plt + facet_grid(location~name)
plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="none")
plt
.. ..

*****************
Electricity Data
*****************

This section gives details of electricity use.



