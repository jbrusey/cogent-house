.. {r ElectricityData, include=FALSE}
.. ..

Over the course of the deployment the following electricity use was observed:
Energy costs are calculated based on a unit cost of £0.15 per kWh.

* Total Electricity Use:  :r:`sum(dailyWatts$kWh,na.rm=TRUE)` kWh
* Estimated Cost: £ :r:`sum(dailyWatts$kWh,na.rm=TRUE) * elecPerUnit` 
* Average Daily Use: :r:`mean(dailyWatts$kWh,na.rm=TRUE)` kWh
* Average Daily Cost: £ :r:`mean(dailyWatts$kWh,na.rm=TRUE) * elecPerUnit`
* Maximum Current Draw: :r:`max(dailyWatts$maxW)` W
      

.. {r elecGraph, echo=FALSE,fig.cap="Electricity Data Trace"}

#Plot everything
plt <- ggplot(ss,aes(ts,calibValue,color=factor(nodeId)))
plt <- plt+geom_line()
plt <- plt+xlab("Date") + ylab("Reading (W)")
plt <- plt + theme_bw()
#plt <- plt + facet_grid(location~.)
#plt <- plt + opts(strip.text.x = element_text(size = 8, colour = "red", angle = 90)
plt <- plt + theme(strip.text.y = element_text(angle=0),legend.position="none")
plt

.. .. 


A heatmap plot of current draw can give further understanding of the
daily electricity consumption, and help identify periods of high energy use.


.. {r elecHeatmap,echo=FALSE,fig.cap="Current Draw Heatmap"}

plt <- ggplot(hourlyWatts)
plt <- plt+geom_tile(aes(hour,wday,fill=avgW),color="white")
plt <- plt+scale_fill_gradient("Average Current Draw")
plt <- plt+scale_y_discrete(limits=rev(levels(hourlyWatts$wday)))
plt <- plt+xlab("Hour of Day") + ylab("Day of Week")
plt + facet_grid(week~.)

.. ..

This last plot shows the total energy use classified by Base, Mid and High energy use.
It can be seen that:
 
* :r:`outFrame[1,]$percent` % of energy is used by the "base" supply
* :r:`outFrame[2,]$percent` % by mid range consumers
* :r:`outFrame[3,]$percent` % of the total energy is used by "Peak" consumers


.. {r elecNILAM,echo=FALSE,fig.cap="Appliacnce breakdown"}

plt <- ggplot(outFrame,aes(1,value,fill=factor(var)))
plt <- plt+geom_bar(stat="identity",position="stack")#
plt <- plt+xlab("") + ylab("kWh")
plt <- plt+theme_bw()
plt <- plt+theme(axis.text.x=element_blank())
#plt <- plt+scale_x_discrete(breaks=NULL)
plt
.. ..