<?xml version="1.0" ?><component abstract="" loc="41:/opt/tinyos-main-read-only/tos/system/PoolC.nc" nicename="tos.system.PoolC" qname="PoolC">
      <documentation loc="33:/opt/tinyos-main-read-only/tos/system/PoolC.nc">
        <short>
  A general dynamic memory pool component.</short>
        <long>
  A general dynamic memory pool component.

  @author Philip Levis
  @author Geoffrey Mainland
  @date   $Date: 2006-12-12 18:23:47 $
</long>
      </documentation>
      <parameters>
        <typedef loc="41:/opt/tinyos-main-read-only/tos/system/PoolC.nc" name="pool_t" ref="0x2b09184eea10">
          <component-ref nicename="tos.system.PoolC" qname="PoolC"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="pool_t" ref="0x2b09184eea10" scoped=""/></type-var>
        </typedef>
        <constant loc="41:/opt/tinyos-main-read-only/tos/system/PoolC.nc" name="POOL_SIZE" ref="0x2b09184eed60">
          <component-ref nicename="tos.system.PoolC" qname="PoolC"/>
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="uint8_t" ref="0x2b091611a790"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
      <wiring>
        <wire loc="49:/opt/tinyos-main-read-only/tos/system/PoolC.nc">
          <from><interface-ref name="Pool" ref="0x2b09184eb310" scoped=""/></from>
          <to><interface-ref name="Pool" ref="0x2b09184e6e30" scoped=""/></to>
        </wire>
        <wire loc="48:/opt/tinyos-main-read-only/tos/system/PoolC.nc">
          <from><interface-ref name="SoftwareInit" ref="0x2b0916ee30e0" scoped=""/></from>
          <to><interface-ref name="Init" ref="0x2b09184e6790" scoped=""/></to>
        </wire>
      </wiring>
    <specification><interface loc="42:/opt/tinyos-main-read-only/tos/system/PoolC.nc" name="Pool" provided="1" ref="0x2b09184eb310">
      <component-ref nicename="tos.system.PoolC" qname="PoolC"/>
      <type-interface alignment="I:2" size="I:2"><interface-ref name="Pool" ref="0x2b09184eb310" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <arguments>
          <type-var alignment="U:" size="U:"><typedef-ref name="pool_t" ref="0x2b09184eea10" scoped=""/></type-var>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2b09184e8280" scoped=""/>
        <function-ref name="maxSize" ref="0x2b09184e9728" scoped=""/>
        <function-ref name="empty" ref="0x2b09184ebe58" scoped=""/>
        <function-ref name="put" ref="0x2b09184e9b78" scoped=""/>
        <function-ref name="size" ref="0x2b09184e92d8" scoped=""/>
      </interface-functions>
    </interface></specification><referenced><interface loc="58:/opt/tinyos-main-read-only/tos/system/MainC.nc" name="SoftwareInit" provided="0" ref="0x2b0916ee30e0">
      <component-ref nicename="tos.system.MainC" qname="MainC"/>
      <type-interface alignment="I:2" size="I:2"><interface-ref name="SoftwareInit" ref="0x2b0916ee30e0" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Init" qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" ref="0x2b0916ee3430" scoped=""/>
      </interface-functions>
    </interface><interface loc="55:/opt/tinyos-main-read-only/tos/system/PoolP.nc" name="Init" provided="1" ref="0x2b09184e6790">
      <component-ref nicename="tos.system.PoolP" qname="PoolC.PoolP"/>
      <type-interface alignment="I:2" size="I:2"><interface-ref name="Init" ref="0x2b09184e6790" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Init" qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" ref="0x2b09184e6ae0" scoped=""/>
      </interface-functions>
    </interface><interface loc="56:/opt/tinyos-main-read-only/tos/system/PoolP.nc" name="Pool" provided="1" ref="0x2b09184e6e30">
      <component-ref nicename="tos.system.PoolP" qname="PoolC.PoolP"/>
      <type-interface alignment="I:2" size="I:2"><interface-ref name="Pool" ref="0x2b09184e6e30" scoped=""/></type-interface>
      <instance>
        <interfacedef-ref nicename="tos.interfaces.Pool" qname="Pool"/>
        <arguments>
          <type-var alignment="U:" size="U:"><typedef-ref name="pool_t" ref="0x2b09184eea10" scoped=""/></type-var>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" ref="0x2b0918542dd0" scoped=""/>
        <function-ref name="maxSize" ref="0x2b09185422d8" scoped=""/>
        <function-ref name="empty" ref="0x2b09184e59e0" scoped=""/>
        <function-ref name="put" ref="0x2b0918542728" scoped=""/>
        <function-ref name="size" ref="0x2b09184e5e30" scoped=""/>
      </interface-functions>
    </interface><component abstract="" loc="53(PoolC.PoolP):/opt/tinyos-main-read-only/tos/system/PoolP.nc" nicename="tos.system.PoolP" qname="PoolC.PoolP">
      <documentation loc="34:/opt/tinyos-main-read-only/tos/system/PoolP.nc">
        <short>
  Implementation of a general dynamic memory pool component.</short>
        <long>
  Implementation of a general dynamic memory pool component.
  Note that the allocation/deallocation policies are 
  different than traditional dynamic allocators such as
  malloc or slab allocators. When initialized, the Pool
  contains &lt;code&gt;size&lt;/code&gt; items of type &lt;code&gt;pool_t&lt;/code&gt;.
  These elements can be removed from the pool for use with 
  &lt;code&gt;Pool.get&lt;/code&gt;, and new elements can be placed in
  the pool with &lt;code&gt;Pool.put&lt;/code&gt;. The pool allows 
  components to &lt;code&gt;put&lt;/code&gt; elements besides those which
  were obtained with &lt;code&gt;get&lt;/code&gt;. The pool can never have
  more than &lt;code&gt;size&lt;/code&gt; elements in it.

  @author Philip Levis
  @author Kyle Jamieson
  @author Geoffrey Mainland
  @date   $Date: 2010-01-20 19:59:07 $
</long>
      </documentation>
      <instance>
        <component-ref nicename="tos.system.PoolP" qname="PoolP"/>
        <arguments>
          <type-var alignment="U:" size="U:"><typedef-ref name="pool_t" ref="0x2b09184eea10" scoped=""/></type-var>
          <value cst="U:">
            <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
              <typename><typedef-ref name="uint8_t" ref="0x2b091611a790"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component><component loc="56:/opt/tinyos-main-read-only/tos/system/MainC.nc" nicename="tos.system.MainC" qname="MainC">
      <documentation loc="45:/opt/tinyos-main-read-only/tos/system/MainC.nc">
        <short>
 MainC is the system interface the TinyOS boot sequence.</short>
        <long>
 MainC is the system interface the TinyOS boot sequence. It wires the
 boot sequence implementation to the scheduler and hardware resources.

 @author Philip Levis
 @date   August 6 2005
 @see    TEP 107: Boot Sequence
</long>
      </documentation>
      <configuration/>
      <wiring>
        <wire loc="72:/opt/tinyos-main-read-only/tos/system/MainC.nc">
          <from><interface-ref name="Boot" ref="0x2b0916ee5c80" scoped=""/></from>
          <to><interface-ref name="Boot" ref="0x2b0916effc40" scoped=""/></to>
        </wire>
        <wire loc="67:/opt/tinyos-main-read-only/tos/system/MainC.nc">
          <from><interface-ref name="Scheduler" ref="0x2b0917093308" scoped=""/></from>
          <to><interface-ref name="Scheduler" ref="0x2b0916a51be8" scoped=""/></to>
        </wire>
        <wire loc="68:/opt/tinyos-main-read-only/tos/system/MainC.nc">
          <from><interface-ref name="PlatformInit" ref="0x2b0917093ce0" scoped=""/></from>
          <to><interface-ref name="Init" ref="0x2b0916efd020" scoped=""/></to>
        </wire>
        <wire loc="71:/opt/tinyos-main-read-only/tos/system/MainC.nc">
          <from><interface-ref name="SoftwareInit" ref="0x2b09170ae418" scoped=""/></from>
          <to><interface-ref name="SoftwareInit" ref="0x2b0916ee30e0" scoped=""/></to>
        </wire>
      </wiring>
    </component></referenced></component>