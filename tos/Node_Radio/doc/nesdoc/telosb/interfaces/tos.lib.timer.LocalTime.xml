<?xml version="1.0" ?><interfacedef loc="53:/opt/tinyos-main-read-only/tos/lib/timer/LocalTime.nc" nicename="tos.lib.timer.LocalTime" qname="LocalTime">
      <documentation loc="36:/opt/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
        <short>
 A LocalTime interface counts time in some units.</short>
        <long>
 A LocalTime interface counts time in some units. If you need to detect
 time overflow, you should use a component offering the Counter
 interface.

 &lt;p&gt;The LocalTime interface is parameterised by its &quot;precision&quot;
 (milliseconds, microseconds, etc), identified by a type. This prevents,
 e.g., unintentionally mixing components expecting milliseconds with
 those expecting microseconds as those interfaces have a different type.

 &lt;p&gt;See TEP102 for more details.

 @param precision_tag A type indicating the precision of this Counter.

 @author Cory Sharp &lt;cssharp@eecs.berkeley.edu&gt;
</long>
      </documentation>
      <parameters>
        <typedef loc="53:/opt/tinyos-main-read-only/tos/lib/timer/LocalTime.nc" name="precision_tag" ref="0x2b09170b7020">
          <interfacedef-ref nicename="tos.lib.timer.LocalTime" qname="LocalTime"/>
          <type-var alignment="U:" size="U:"><typedef-ref name="precision_tag" ref="0x2b09170b7020" scoped=""/></type-var>
        </typedef>
      </parameters>
      <function command="" loc="61:/opt/tinyos-main-read-only/tos/lib/timer/LocalTime.nc" name="get" provided="0" ref="0x2b09170b78b0">
        <documentation loc="55:/opt/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
          <short> 
 Return current time.</short>
          <long> 
 Return current time. Time starts counting at boot - some time sources
 may stop counting while the processor is in low-power mode.

 @return Current time.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.lib.timer.LocalTime" qname="LocalTime"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:2" cname="unsigned long" size="I:4" unsigned="">
            <typename><typedef-ref name="uint32_t" ref="0x2b091611b020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>