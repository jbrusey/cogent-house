<?xml version="1.0" ?><interfacedef loc="17:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc" nicename="tos.chips.cc2420.interfaces.ChipSpiResource" qname="ChipSpiResource">
      <documentation loc="2:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc">
        <short>
 Interface for the SPI resource for an entire chip.</short>
        <long>
 Interface for the SPI resource for an entire chip.  The chip accesses
 the platform SPI resource one time, but can have multiple clients 
 using the SPI bus on top.  When all of the clients are released, the
 chip will normally try to release itself from the platforms SPI bus.
 In some cases, this isn't desirable - so even though upper components
 aren't actively using the SPI bus, they can tell the chip to hold onto
 it so they can have immediate access when they need. 

 Any component that aborts a release MUST attempt the release at a later
 time if they don't acquire and release the SPI bus naturally after the
 abort.
 
 @author David Moss
</long>
      </documentation>
      <function event="" loc="24:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc" name="releasing" provided="0" ref="0x2b09179e68c8">
        <documentation loc="19:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>
 The SPI bus is about to be automatically released.</short>
          <long>
 The SPI bus is about to be automatically released.  Modules that aren't
 using the SPI bus but still want the SPI bus to stick around must call
 abortRelease() within the event.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.chips.cc2420.interfaces.ChipSpiResource" qname="ChipSpiResource"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="31:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc" name="abortRelease" provided="0" ref="0x2b09179e50d8">
        <documentation loc="27:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>
 Abort the release of the SPI bus.</short>
          <long>
 Abort the release of the SPI bus.  This must be called only with the
 releasing() event
</long>
        </documentation>
        <interfacedef-ref nicename="tos.chips.cc2420.interfaces.ChipSpiResource" qname="ChipSpiResource"/>
        <type-function alignment="I:1" size="I:1">
          <type-void alignment="I:1" size="I:1"/>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" loc="39:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc" name="attemptRelease" provided="0" ref="0x2b09179e58a8">
        <documentation loc="33:/opt/tinyos-main-read-only/tos/chips/cc2420/interfaces/ChipSpiResource.nc">
          <short>
 Release the SPI bus if there are no objections
 </short>
          <long>
 Release the SPI bus if there are no objections
 @return SUCCESS if the SPI bus is released from the chip.
      FAIL if the SPI bus is already in use.
      EBUSY if some component aborted the release.
</long>
        </documentation>
        <interfacedef-ref nicename="tos.chips.cc2420.interfaces.ChipSpiResource" qname="ChipSpiResource"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="error_t" ref="0x2b0916a571a8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>