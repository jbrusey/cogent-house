<?xml version="1.0" ?><interfacedef loc="50:/opt/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc" nicename="tos.interfaces.McuPowerOverride" qname="McuPowerOverride">
      <documentation loc="35:/opt/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
        <short>
 Interface to allow high-level components to set a lower bound for a
 microcontroller's low power state.</short>
        <long>
 Interface to allow high-level components to set a lower bound for a
 microcontroller's low power state. This is sometimes necessary,
 e.g., if a very low power state has a long wakeup latency that will
 violate application timing requirements. TEP 112 describes how
 TinyOS incorporates this information when the Scheduler tells
 the MCU to enter a low power state.
 
 @author Philip Levis
 @date   Oct 26, 2005
 @see    TEP 112: Microconroller Power Management
</long>
      </documentation>
      <function command="" loc="62:/opt/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc" name="lowestState" provided="0" ref="0x2b0916e23378">
        <documentation loc="52:/opt/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
          <short>
 Called when computing the low power state, in order to allow
 a high-level component to institute a lower bound.</short>
          <long>
 Called when computing the low power state, in order to allow
 a high-level component to institute a lower bound. Because
 this command originates deep within the basic TinyOS scheduling
 mechanisms, it should be used very sparingly. Refer to TEP 112 for
 details.

 @return    the lowest power state the system can enter to meet the 
            requirements of this component
</long>
        </documentation>
        <interfacedef-ref nicename="tos.interfaces.McuPowerOverride" qname="McuPowerOverride"/>
        <type-function alignment="I:1" size="I:1">
          <type-int alignment="I:1" cname="unsigned char" size="I:1" unsigned="">
            <typename><typedef-ref name="mcu_power_t" ref="0x2b0916b00ae0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>