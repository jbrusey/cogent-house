#!/bin/sh

### BEGIN INIT INFO
# Provides:          ch-ssh
# Required-Start:    $remote_fs $syslog mysql
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Cogent-House SSH Tunnel
# Description:       Tunnel to Cogentee
#                    
#                    
### END INIT INFO

# Author: Daniel Goldsmith <djgoldsmith@googlemail.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
##-PATH=/sbin:/usr/sbin:/bin:/usr/bin
#PATH=/opt/tinyos-release
DESC="Cogent House: SSH"
NAME=ch-ssh
##DAEMON=/usr/sbin/$NAME
##DAEMON_ARGS="--options args"
DAEMON=/usr/bin/ssh

PORT=9000


if [ -n "$2" ]
then
	echo "COMMAND LINE"
	PORT=$(($PORT+$2))
fi

#while getopts ":p:" opt; do
#      #echo "TRIGGERED" $opt $OPTARG
#      PORT=$[$PORT+$OPTARG]
#      #echo $PORT
#done


DAEMON_ARGS=" -N -R $PORT:localhost:22 pi@cogentee.coventry.ac.uk -i /home/pi/.ssh/id_rsa"
#DAEMON_ARGS=" -R $PORT:localhost:22 pi@194.66.45.85 -i /home/pi/.ssh/id_rsa"

echo $DAEMON_ARGS
#exit 0


#PIDFILE=/var/run/$NAME.pid
PIDFILE=/var/run/sshpid.pid
SCRIPTNAME=/etc/init.d/$NAME

##= # Exit if the package is not installed
##= [ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
##= [ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started

	log_daemon_msg "Starting SSH Tunnel!!"
	echo $DAEMON_ARGS
	#Source tinyos
	## --- This is some kind of test code  Not too sure what to do here however the script checks if it is running anyhow
#	start-stop-daemon --start --verbose --background --make-pidfile --pidfile $PIDFILE  --exec $DAEMON -- $DAEMON_ARGS > /dev/null \
#		|| echo "Running" return 1



	#start-stop-daemon --start --quiet --background --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \

	start-stop-daemon --start --verbose --make-pidfile --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2

	log_end_msg 0
	return 0

	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
        log_daemon_msg "Stopping ch-sf"

	
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2

	# start-stop-daemon --stop --verbose --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	# RETVAL="$?"
	# [ "$RETVAL" = 2 ] && return 2
	# # Wait for children to finish too if this is a daemon that forks
	# # and if the daemon is only ever run from this initscript.
	# # If the above conditions are not satisfied then add some other code
	# # that waits for the process to drop all resources that could be
	# # needed by services started subsequently.  A last resort is to
	# # sleep for some time.
	# start-stop-daemon --stop --verbose --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	# [ "$?" = 2 ] && return 2

	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	log_end_msg 0
	return "$RETVAL"

}

# #
# # Function that sends a SIGHUP to the daemon/service
# #
# do_reload() {
# 	#
# 	# If the daemon can reload its configuration without
# 	# restarting (for example, when it is sent a SIGHUP),
# 	# then implement that here.
# 	#
# 	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
# 	return 0
# }


case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	if [ -e $PIDFILE ]; then
	    #If a Pid file exists then check if the process is running
	    status_of_proc "$DAEMON" "$NAME"  && status="0" || status="$?"
	    if [ $status = "0" ]; then
		exit 0
	    fi
	fi
	do_start
	case "$?" in
		"0") [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		"2") [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:

